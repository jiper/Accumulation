CDRadio固件开发与算法移植

背景：已经存在这样CDRadio c++版算法，可以实现差分信号的调制与解调。为了产品，公司需要设计具有解调功能的基带芯片，配合Tunner实现广播信号的接收、差分信号的解调和输出。

------------------------------------------
第一阶段：理解算法运行流程并移植为C算法
1、第一步需要理解算法运行流程，可以对具体函数的运行逻辑不是很清楚，但是需要对数据流了如指掌。
2、嵌入式开发语言以C语言为主，将算法移植成C语言，一方面可以进一步算法运行流程，另一方面可以得到C算法版本，作为固件移植的基础。

第二阶段：设计固件软件框架
内核接口和底层驱动
1、Cortex内核提供的CMSIS（CMISIS：微控制器软件接口标准）
2、芯片供应商提供的SDK （SDK：software developer kit）,对应就是一些底层的驱动

板级驱动包装
对会用到的底层驱动进行一层包装

算法层
.h头文件 .lib库文件 .dll动态库文件之间的关系：http://blog.csdn.net/yusiguyuan/article/details/12649737

用户层
对算法进行包装，提供给用户简单清晰可调用的函数接口，屏蔽具体的实现方式

第三阶段：板级驱动开发和测试---打地基
  确保通信模块的驱动正确

第四阶段：算法移植与测试
1、数据类型测试
    为避免移植缺陷，对int、short、float、double、char等数据类型的长度和范围进行测试
     char在VS中默认有符号，在keil中默认无符号
2、算法移植---建立固件基础版本
    1）复制算法源代码
    2）堆栈空间分配
    2）通信机制设计---算法采取读文件作为输入，固件通过串口，I2S，SPI作为输入
    3）中断优先级设计
3、处理错误
   1）处理编译错误
   2）修复数据类型移植缺陷
4、调试
   根据数据流对算法分模块和函数进行调试，对输入输出进行严格比对
可能遇到的问题：
1）调试过程比较繁琐复杂
2）内存问题：指针越界、索引越界（对所有计算索引的变量进行取值检查）

第四阶段：性能优化
1）函数优化
2）DMA
3）分散加载




