启动代码的作用：
1、初始化并正确放置异常/中断向量表 
（1）初始化堆栈指针 SP == _initial_sp； 
         SP指向栈顶（高地址）
（2）初始PC指针 ==Reset_Handler（复位处理程序）； 
（3）初始化中断向量表；
2、分散加载
3、初始化C语言运行环境 
（4）配置系统时钟； 
（5）调用C库_main()函数初始化用户堆栈，从而最终调用main()主函数去到C世界。

中断向量表的位置：
1、中断向量表的起始位置位flash的起始地址0x0800_0000。
2、中断向量表中的内容以4字节位单位。第一项保存初始栈顶地址，第二项为复位中断服务入口地址


启动过程：
1、先在RAM中分配系统使用的栈，RAM的起始地址为0x2000_0000
2、然后在RAM中分配变量使用的堆
3、然后在CODE区(flash)分配中断向量表，flash的起始地址为0x0800_0000，该中断向量表就从这个起始地址开始分配
4、分配完成后，再定义和实现相应的中断函数，
5、所有的中断函数全部带有[weak]特性，即弱定义，如果编译器发现在别处文件中定义了同名函数，在链接时用别处的地址进行链接。
6、中断函数仅仅实现了Reset_Handler,其他要么是死循环，要么仅仅定义了函数名称 
7、STM32被设置为从内部FLASH启动时（这也是最常见的一种情况），当STM32遇到复位信号后，
8、从0x0800_0000处取出栈顶地址存放于MSP寄存器，从0x0800_0004处取出复位中断服务入口地址放入PC寄存器，
9、继而执行复位中断服务程序Reset_Handler，
10、Reset_Handler仅仅执行了两个函数调用,一个是SystemInit，另一个__main,
11、SystemInit定义在system_stm32f10x.c中,主要初始化了STM的时钟系统:HSI,HSE,LSI,LSE,PLL,SYSCLK,USBCLK,APECLK等等.
12、__main函数由编译器生成，负责初始化栈、堆等，并在最后跳转到用户自定义的main()函数，来到C的世界。


启动代码的使用：
启动代码中以及main()函数或用户代码中的最大区别就是是在__main之前还是之后。
看门狗开关可以放到启动代码中执行
