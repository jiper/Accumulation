第一步：了解软件目前的运行状态与要达到的目标。
代码可读性、运行效率、内存占用的矛盾。

第二步：粗略优化
1、利用编译器工具对代码做最大限度的优化。
2、所有double型变量优化为float变量，double型运算优化为float运算

第三步：代码分析。找到资源消耗最大的模块。优先从资源消耗大的模块着手优化。资源消耗越大，优化的潜在收益越大。

第四步：了解你的编译器和指令集
1、编译器是否会替你进行常量计算。如果是，则不比优化常量计算来牺牲代码可读性。
2、16位整数操作、8位整数操作的效率是否和32位整数操作一致。内存占用和运行效率如何平衡。
3、硬件是否支持乘法操作、除法操作。
4、存在哪些高效的指令，以及C代码写成什么风格会让编译器编译成这些指令。

第五步：实施具体优化
1、理解模块功能，发现实现上的冗余，优化代码实现。
2、源代码优化
 2.1 循环优化
    原则：能放到循环体外面的运算放到循环体外面，降低循环次数。
    1）公共表达式放到循环体外部
    2）循环嵌套优化。
      i)避免循环嵌套。
      ii)如果是必须的，外层小循环，内层大循环。
    3) 循环中避免条件判断。能放到循环外面的条件判断放到循环体外面。
    4）循环中避免函数调用。通过宏定义文本替换和函数内联避免函数的调用开销，或直接展开。
    5) 循环展开，提高cache命中率。
    6）使用减计数
    7）使用无符号循环计数，如果可以用i！=0代替i>0
    8) do-while代替for循环（循环至少执行一次）
  2.2 复杂运算优化
     原则：浮点计算定点化，乘法除法转为移位（硬件支持的操作除外）
     1）乘法
     2）除法---尽量用乘法操作代替，详见<<ARM嵌入式系统开发>>p131
     3）求跟、求模、求对数
     4）浮点计算定点化
  2.3 数据类型选择优化
     1）通常来说，对于32位处理器（32位寄存器），32处理一般比16位、8位操作更加高效，至少不会更低。除非用到一些特殊的操作，比如归零处理（其实应该避免这种情况）。
     2）除法运算使用无符号更加高效。
     3）对于大型数组，在满足数据大小的前提，尽量使用小尺寸的数据类型，来节省存储空间
     3）避免类型转换，如果有必要，显示转换
     4）函数参数和返回值使用int
  2.4 函数调用
     1）局部变量不要超过4个，如果超过，可以用结构体指针代替
     2）把被调用函数和调用函数放到同一个源文件中，并且先定义，后调用。编译器可以自动决定是否内联
     3）主动内联
  2.5 指针别名
      1）主动消除公共子表达式
      2）避免使用局部变量的地址，如果是用指针传递的参数，先用局部变量保存指针指向的值，避免多次装载
  2.6 结构体安排
      1）结构体元素要按照元素的大小来排列，最小的元素放在前面
      2）避免大结构体，使用结构体嵌套
  2.7 避免非对齐访问数据
    
     
     