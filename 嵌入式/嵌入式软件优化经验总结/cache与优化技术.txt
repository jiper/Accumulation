如何提高cache命中率？

原则：代码高度可预测

经验：
1. 循环体要纯粹，尽量避免循环
2. 循环嵌套时，次数多的安排在内层
3. 循环种避免使用链表
4. 循环体展开


优化思路：
0. 编译器优化开关，直接打开
1. 利用外部profile工具，查找性能瓶颈，按照28法则进行优化。同时关注如何提高系统整体命中率
2. 架构重构，使用不同的实现方法达到相同的目的 ―― 优化幅度巨大
3. 最优先考虑算法上的优化 ―― 可观
4. 源码级优化（通用手法）―― 一到两倍
5. 根据特定平台进行汇编改写，使用高级指令 ―― 提升10%~30%，很少使用


通用源码优化手段：
1. 避免浮点/除法运算
2. 乘法改移位
3. 开根号/求对数，使用快速简化运算
4. 循环展开
5. 循环内部小循环套大循环
6. 循环体内避免出现判断语句
7. 减少函数调用，对于纯粹的，调用频繁的函数进行内联
8. 函数定义不能超过4个参数，如做不到请用结构体将参数打包，传入结构体指针


连接：http://www.azillionmonkeys.com/qed/optimize.html
1. 把循环体里的判断干掉
2. 对关键的变量用register（可能没用）
3.  
4.  
5.  
6. else可以想办法去掉
7. 定义二维数组时，外层一定要是2的倍数。  int arr[3][23]改为int arr[3][32];
8. 优化循环：for改为do...while, 并且要递减（效率最高的一种循环模式）
9. 尽量避免赋值时的隐式类型转换（保证数据类型一致）
10. 局部的函数定义为static
11. 永远牢记28法则
12. 看看反汇编的代码

优化经验补充：
1、不要尝试将代替进行常量运算，因为编译器会做类似的优化。
2、
