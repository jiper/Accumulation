算法移植遇到的问题总结：
一、大部分移植中遇到的问题，可以通过常规调试方法，比如说单步调试对比单条指令运行结果，或者通过对比输出输出调试函数是否运行正确。通过这种方法可以解决大部分移植带来的缺陷错误。
常见的移植错误：
1）数据类型错误：char在keil中是无符号的，在VS是有符号的；int short long的长度；-----尽量使用可移植的数据类型
2）标准库问题：keil对标准库可能存在简化，不支持某些函数，比如说math.round函数。
二、真正头疼的问题，难以调试的问题永远是内存问题
举例：
现象： 曾经在代码调试时遇到一个问题，我在一个工程里多处调用ctype.h里面的tolower（）函数，在不同的地方，函数运行的准确性不一样，比如输入的参数同时是‘d’,正常来说tolower('d'）的输出就是‘d’,但是在我的工程里面，有时候正确输出，有时候却输出‘d’+32。而且是工程的前部分正确输出，后部分错误输出。
解决思路：
1、这个现象让我非常费解，同样的函数，同样的输入为啥会输出不同的结果？看样子是tolower()里面判断输入是否为大写的逻辑出错了，但是究竟是什么导致了这种错误？而且这种错误无法单步去调试，（标准库是通过动态库或静态库的形式提供的），汇编代码中就是一个简单的跳转指令，无法从汇编中看出任何端倪。
2、这是一个运行时错误，我敢肯定这是一个内存问题，但是苦于没有很好的调试手段。我只能尝试用常规的办法来解决这个问题。
  1)这是一个运行时错误，我首先需要找到程序运行到哪个地方出错的。通过注释调试的办法，找到了导致错误的具体函数A。注释这个函数，代码运行良好，所有调用tolower()的地方都运行正确。反之，打开这个函数将会导致调用这个函数的函数B中，tolower()运行出错。而函数A中的逻辑非常简单，就是传进来一个数组地址，完成数组的赋值。
  2）我仔细检查了函数A，不存在野指针，也不存在数组索引越界的情况。函数运行的结果没有任何错误，符合期望。---所以我还是对这个现象一头雾水。
  3）当然我最后找到了问题的关键所在。问题出在堆栈溢出，我在函数B中分配了一个大数组，但是未初始化，未赋值，这个大数组导致了堆栈溢出。但是由于未初始化和赋值，所以侥幸没有导致内存错误。但是在函数A中完成了数组赋值，破坏了内存中。而恰好我对代码进行了分散加载，刚好破坏了tolower()的代码逻辑。
  4）调大栈空间之后这个问题就解决了。

C语言常见的内存错误：
1、内存泄漏：动态分配的内存没有释放
2、间接引用不良指针： scanf("%d",$val);
3、野指针
4、索引越界
5、堆栈溢出

